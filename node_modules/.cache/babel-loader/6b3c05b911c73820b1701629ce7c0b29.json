{"ast":null,"code":"var _jsxFileName = \"/Users/hassanmunir.ahmed/Documents/react/fruits-farm/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Header from \"./components/header\";\nimport \"./App.css\";\nimport FruitsList from \"./components/fruits-list\";\nimport api from './api/fruits';\nimport { useEffect, useState } from \"react\";\nimport NutritionalStatistics from \"./components/nutritional-statistics\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [fruits, setFruits] = useState([]);\n  const [statistics, setStatistics] = useState([]);\n  const [searchValue, setSearchValue] = useState('');\n\n  const getAllFruits = async () => {\n    return await api.get(\"/fruits/all\");\n  };\n\n  const handleChange = event => {\n    setSearchValue(event.target.value);\n  };\n\n  const searchFruit = () => {\n    return fruits.filter(fruit => fruit.name.toLowerCase().includes(searchValue.toLowerCase()));\n  };\n\n  const getStatistics = allFruits => {\n    let statistics = [];\n    let caloriesStatistics = {\n      name: 'calories',\n      avg: 0,\n      min: allFruits.data[0].nutritions.calories,\n      max: allFruits.data[0].nutritions.calories\n    };\n    let carbsStatistics = {\n      name: 'carbs',\n      avg: 0,\n      min: allFruits.data[0].nutritions.carbohydrates,\n      max: allFruits.data[0].nutritions.carbohydrates\n    };\n    let fatStatistics = {\n      name: 'fat',\n      avg: 0,\n      min: allFruits.data[0].nutritions.fat,\n      max: allFruits.data[0].nutritions.fat\n    };\n    let proteinStatistics = {\n      name: 'protein',\n      avg: 0,\n      min: allFruits.data[0].nutritions.protein,\n      max: allFruits.data[0].nutritions.protein\n    };\n    let sugarStatistics = {\n      name: 'sugar',\n      avg: 0,\n      min: allFruits.data[0].nutritions.sugar,\n      max: allFruits.data[0].nutritions.sugar\n    };\n    allFruits.data.map(fruit => {\n      caloriesStatistics.avg = caloriesStatistics.avg + fruit.nutritions.calories;\n      carbsStatistics.avg = carbsStatistics.avg + fruit.nutritions.carbohydrates;\n      fatStatistics.avg = fatStatistics.avg + fruit.nutritions.fat;\n      proteinStatistics.avg = proteinStatistics.avg + fruit.nutritions.protein;\n      sugarStatistics.avg = sugarStatistics.avg + fruit.nutritions.sugar; //#region calories min/max\n\n      if (caloriesStatistics.min > fruit.nutritions.calories) {\n        caloriesStatistics.min = fruit.nutritions.calories;\n      }\n\n      if (caloriesStatistics.max < fruit.nutritions.calories) {\n        caloriesStatistics.max = fruit.nutritions.calories;\n      } //#endregion\n      //#region carbs min/max\n\n\n      if (carbsStatistics.min > fruit.nutritions.carbohydrates) {\n        carbsStatistics.min = fruit.nutritions.carbohydrates;\n      }\n\n      if (carbsStatistics.max < fruit.nutritions.carbohydrates) {\n        carbsStatistics.max = fruit.nutritions.carbohydrates;\n      } //#endregion\n      //#region fat min/max\n\n\n      if (fatStatistics.min > fruit.nutritions.fat) {\n        fatStatistics.min = fruit.nutritions.fat;\n      }\n\n      if (fatStatistics.max < fruit.nutritions.fat) {\n        fatStatistics.max = fruit.nutritions.fat;\n      } //#endregion\n      //#region protein min/max\n\n\n      if (proteinStatistics.min > fruit.nutritions.protein) {\n        proteinStatistics.min = fruit.nutritions.protein;\n      }\n\n      if (proteinStatistics.max < fruit.nutritions.protein) {\n        proteinStatistics.max = fruit.nutritions.protein;\n      } //#endregion\n      //#region sugar min/max\n\n\n      if (sugarStatistics.min > fruit.nutritions.sugar) {\n        sugarStatistics.min = fruit.nutritions.sugar;\n      }\n\n      if (sugarStatistics.max < fruit.nutritions.sugar) {\n        sugarStatistics.max = fruit.nutritions.sugar;\n      } //#endregion\n\n    });\n    caloriesStatistics.avg = (caloriesStatistics.avg / allFruits.data.length).toFixed(2);\n    statistics.push(caloriesStatistics);\n    carbsStatistics.avg = (carbsStatistics.avg / allFruits.data.length).toFixed(2);\n    statistics.push(carbsStatistics);\n    fatStatistics.avg = (fatStatistics.avg / allFruits.data.length).toFixed(2);\n    statistics.push(fatStatistics);\n    proteinStatistics.avg = (proteinStatistics.avg / allFruits.data.length).toFixed(2);\n    statistics.push(proteinStatistics);\n    sugarStatistics.avg = (sugarStatistics.avg / allFruits.data.length).toFixed(2);\n    statistics.push(sugarStatistics);\n    setFruits(allFruits.data);\n    setStatistics(statistics);\n  };\n\n  useEffect(() => {\n    const fetchFruits = async () => {\n      const allFruits = await getAllFruits();\n\n      if (allFruits.data) {\n        getStatistics(allFruits);\n      }\n    };\n\n    fetchFruits();\n  }, []);\n  useEffect(() => {}, [fruits]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NutritionalStatistics, {\n      statistics: statistics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"input-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"search\",\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"Search by name\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FruitsList, {\n        fruits: searchFruit()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"FfvY70fwHW797LmVn3VMupO+Ju4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/hassanmunir.ahmed/Documents/react/fruits-farm/src/App.js"],"names":["Header","FruitsList","api","useEffect","useState","NutritionalStatistics","App","fruits","setFruits","statistics","setStatistics","searchValue","setSearchValue","getAllFruits","get","handleChange","event","target","value","searchFruit","filter","fruit","name","toLowerCase","includes","getStatistics","allFruits","caloriesStatistics","avg","min","data","nutritions","calories","max","carbsStatistics","carbohydrates","fatStatistics","fat","proteinStatistics","protein","sugarStatistics","sugar","map","length","toFixed","push","fetchFruits"],"mappings":"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","sourcesContent":["import Header from \"./components/header\";\nimport \"./App.css\";\nimport FruitsList from \"./components/fruits-list\";\nimport api from './api/fruits';\nimport { useEffect, useState } from \"react\";\nimport NutritionalStatistics from \"./components/nutritional-statistics\";\n\nconst App = () => {\n\n  const [fruits, setFruits] = useState([]);\n  const [statistics, setStatistics] = useState([]);\n  const [searchValue, setSearchValue] = useState('');\n\n  const getAllFruits = async () => {\n    return await api.get(\"/fruits/all\");\n  }\n\n  const handleChange = (event) => {\n    setSearchValue(event.target.value);\n  }\n\n  const searchFruit = () => {\n    return fruits.filter((fruit) => fruit.name.toLowerCase().includes(searchValue.toLowerCase()));\n  }\n\n  const getStatistics = (allFruits) => {\n    let statistics = [];\n    let caloriesStatistics = {\n      name: 'calories',\n      avg: 0,\n      min: allFruits.data[0].nutritions.calories,\n      max: allFruits.data[0].nutritions.calories\n    }\n    let carbsStatistics = {\n      name: 'carbs',\n      avg: 0,\n      min: allFruits.data[0].nutritions.carbohydrates,\n      max: allFruits.data[0].nutritions.carbohydrates\n    }\n    let fatStatistics = {\n      name: 'fat',\n      avg: 0,\n      min: allFruits.data[0].nutritions.fat,\n      max: allFruits.data[0].nutritions.fat\n    }\n    let proteinStatistics = {\n      name: 'protein',\n      avg: 0,\n      min: allFruits.data[0].nutritions.protein,\n      max: allFruits.data[0].nutritions.protein\n    }\n    let sugarStatistics = {\n      name: 'sugar',\n      avg: 0,\n      min: allFruits.data[0].nutritions.sugar,\n      max: allFruits.data[0].nutritions.sugar\n    }\n    allFruits.data.map((fruit) => {\n      caloriesStatistics.avg = caloriesStatistics.avg + fruit.nutritions.calories;\n      carbsStatistics.avg = carbsStatistics.avg + fruit.nutritions.carbohydrates;\n      fatStatistics.avg = fatStatistics.avg + fruit.nutritions.fat;\n      proteinStatistics.avg = proteinStatistics.avg + fruit.nutritions.protein;\n      sugarStatistics.avg = sugarStatistics.avg + fruit.nutritions.sugar;\n      //#region calories min/max\n      if (caloriesStatistics.min > fruit.nutritions.calories) {\n        caloriesStatistics.min = fruit.nutritions.calories\n      }\n      if (caloriesStatistics.max < fruit.nutritions.calories) {\n        caloriesStatistics.max = fruit.nutritions.calories\n      }\n      //#endregion\n      //#region carbs min/max\n      if (carbsStatistics.min > fruit.nutritions.carbohydrates) {\n        carbsStatistics.min = fruit.nutritions.carbohydrates\n      }\n      if (carbsStatistics.max < fruit.nutritions.carbohydrates) {\n        carbsStatistics.max = fruit.nutritions.carbohydrates\n      }\n      //#endregion\n      //#region fat min/max\n      if (fatStatistics.min > fruit.nutritions.fat) {\n        fatStatistics.min = fruit.nutritions.fat\n      }\n      if (fatStatistics.max < fruit.nutritions.fat) {\n        fatStatistics.max = fruit.nutritions.fat\n      }\n      //#endregion\n      //#region protein min/max\n      if (proteinStatistics.min > fruit.nutritions.protein) {\n        proteinStatistics.min = fruit.nutritions.protein\n      }\n      if (proteinStatistics.max < fruit.nutritions.protein) {\n        proteinStatistics.max = fruit.nutritions.protein\n      }\n      //#endregion\n      //#region sugar min/max\n      if (sugarStatistics.min > fruit.nutritions.sugar) {\n        sugarStatistics.min = fruit.nutritions.sugar\n      }\n      if (sugarStatistics.max < fruit.nutritions.sugar) {\n        sugarStatistics.max = fruit.nutritions.sugar\n      }\n      //#endregion\n    })\n    caloriesStatistics.avg = (caloriesStatistics.avg / allFruits.data.length).toFixed(2);\n    statistics.push(caloriesStatistics);\n    carbsStatistics.avg = (carbsStatistics.avg / allFruits.data.length).toFixed(2);\n    statistics.push(carbsStatistics);\n    fatStatistics.avg = (fatStatistics.avg / allFruits.data.length).toFixed(2);\n    statistics.push(fatStatistics);\n    proteinStatistics.avg = (proteinStatistics.avg / allFruits.data.length).toFixed(2);\n    statistics.push(proteinStatistics);\n    sugarStatistics.avg = (sugarStatistics.avg / allFruits.data.length).toFixed(2);\n    statistics.push(sugarStatistics);\n    setFruits(allFruits.data);\n    setStatistics(statistics);\n  }\n\n  useEffect(() => {\n    const fetchFruits = async () => {\n      const allFruits = await getAllFruits();\n      if (allFruits.data) {\n        getStatistics(allFruits);\n      }\n    }\n    fetchFruits();\n\n  }, []);\n\n  useEffect(() => {\n  }, [fruits])\n\n  return (\n    <div className=\"container\">\n      <Header />\n      <NutritionalStatistics statistics={statistics} />\n      <div className=\"table-wrapper\">\n        <form className=\"input-wrapper\">\n          <input className=\"search\" type=\"text\" name=\"name\" placeholder=\"Search by name\" onChange={handleChange} />\n        </form>\n        <FruitsList fruits={searchFruit()} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}